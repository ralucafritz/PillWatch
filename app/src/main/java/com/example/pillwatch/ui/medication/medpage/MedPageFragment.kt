package com.example.pillwatch.ui.medication.medpage

import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.pillwatch.PillWatchApplication
import com.example.pillwatch.R
import com.example.pillwatch.data.model.AlarmEntity
import com.example.pillwatch.databinding.FragmentMedPageBinding
import com.example.pillwatch.ui.alarms.AlarmsListAdapter
import com.example.pillwatch.ui.alarms.AlarmsPerDayFragmentArgs
import com.example.pillwatch.ui.alarms.OnAlarmUpdatedListener
import com.example.pillwatch.ui.main.MainActivity
import com.example.pillwatch.utils.extensions.ContextExtensions.toast
import com.example.pillwatch.utils.extensions.ContextExtensions.toastTop
import kotlinx.coroutines.launch
import javax.inject.Inject

class MedPageFragment : Fragment(), OnAlarmUpdatedListener {
    private lateinit var binding: FragmentMedPageBinding

    @Inject
    lateinit var viewModel: MedPageViewModel

    override fun onAttach(context: Context) {
        super.onAttach(context)

        // inject the fragment with the app component, allowing it to access the ViewModel
        (requireActivity().application as PillWatchApplication).appComponent.inject(this)
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Binding
        binding = FragmentMedPageBinding.inflate(inflater)

        val previousFragment = (requireActivity() as MainActivity).getPreviousFragment()
        (requireActivity() as MainActivity).navBarToolbarBottomNav(false, R.id.medPageFragment)

        val id = AlarmsPerDayFragmentArgs.fromBundle(requireArguments()).id

        // Lifecycle
        binding.lifecycleOwner = this

        // ViewModel
        binding.viewModel = viewModel

        viewModel.getMedEntity(id)

        viewModel.medEntity.observe(viewLifecycleOwner) {
            if (it != null) {
                binding.medName.text = it.tradeName
                binding.medConc.text = it.concentration
                viewModel.getAlarms()
                if (it.medId != null) {
                    binding.medItemFab.setImageResource(R.drawable.ic_check)
                    binding.medItemFab.setColorFilter(
                        ContextCompat.getColor(
                            requireContext(),
                            R.color.green
                        )
                    )
                } else {
                    binding.medItemFab.setImageResource(R.drawable.ic_close)
                    binding.medItemFab.setColorFilter(
                        ContextCompat.getColor(
                            requireContext(),
                            R.color.red
                        )
                    )
                }
            } else {
                navigateToMedicationPage()
                requireContext().toast("Error: Medication not found.")
            }
        }

        binding.backButton.setOnClickListener{
            when (previousFragment) {
                R.id.medicationFragment -> {
                    navigateToMedicationPage()
                }
                R.id.homeFragment -> {
                    navigateToHomePage()
                }
                else -> {
                    navigateToHomePage()
                }
            }
        }

        binding.deleteButton.setOnClickListener{
            viewModel.deleteMed()
            navigateToMedicationPage()
            requireContext().toastTop("Med ${viewModel.medEntity.value!!.tradeName} deleted successfully.")
        }

        // set up the RecyclerView to display the alarms
        val recyclerView = binding.alarmsList

        recyclerView.layoutManager = LinearLayoutManager(context)
        val adapter = AlarmsListAdapter(requireContext(), this@MedPageFragment)
        recyclerView.adapter = adapter

        // update the alarms list in the adapter when it changes in the ViewModel
        viewModel.alarmsList.observe(viewLifecycleOwner) {
            adapter.updateAlarms(viewModel.alarmsList.value!!)
        }

        return binding.root
    }

    private fun navigateToMedicationPage() {
        this@MedPageFragment.findNavController().navigate(
            MedPageFragmentDirections.actionMedPageFragmentToMedicationFragment()
        )
    }

    private fun navigateToHomePage() {
        this@MedPageFragment.findNavController().navigate(
            MedPageFragmentDirections.actionMedPageFragmentToHomeFragment()
        )
    }

    //  called when an alarm is updated by the user manually -> the other alarms do not get autogenerated
    //  but they do get sorted based on the next possible alarm
    override fun onAlarmUpdated(alarm: AlarmEntity) {
        lifecycleScope.launch {
            viewModel.updateAlarm(alarm)
        }
    }
}